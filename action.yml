description: 'Create tag'
branding:
  icon: 'arrow-right-circle'
  color: 'gray-dark'

inputs:
  token:
    description: 'your token'
    required: true
  tag:
    description: 'tag name'
    required: true
  release:
    description: 'release name'
    required: true
  latest:
    description: 'make this release latest'
    required: false
    type: boolean
    default: true

runs:
  using: 'composite'
  steps:
    - name: check runner
      if: ${{ runner.os != 'Linux' }}
      shell: bash
      run: |
        echo "::error title=wrong runner os error hint::only Linux is supported"
        exit 1
    - name: check tag
      shell: bash
      run: |
        RES=$(git ls-remote https://github.com/${{ github.repository }}.git --tags ${{ inputs.tag }})
        if [ -n "$RES" ]; then
          echo "tag ${{ inputs.tag }} already exists" >> $GITHUB_STEP_SUMMARY
          echo "::error title=tag already exists"
          exit 1
        fi
    - name: check release
      shell: bash
      run: |
        RELEASE_NAME="${{ inputs.release }}"
        if [ -n "$RELEASE_NAME" ]; then
          RELEASE_NAME="${{ inputs.tag }}"
        fi
        RES=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases 2>/dev/null)
        RES=$(echo $RES | jq ".[] | select(.name == \"$RELEASE_NAME\") | .name")
        if [ -n "$RES" ]; then
          echo "release $RELEASE_NAME already exists" >> $GITHUB_STEP_SUMMARY
          echo "::error title=release already exists"
          exit 1
        fi
    - name: create release
      shell: bash
      run: |
        RELEASE_NAME="${{ inputs.release }}"
        if [ -z "$RELEASE_NAME" ]; then
          RELEASE_NAME="${{ inputs.tag }}"
        fi
        LATEST="${{ inputs.latest }}"
        if [ -z "$LATEST" ]; then
          LATEST="true"
        fi
        QUERY="{\"tag_name\":\"${{ inputs.tag }}\",\"name\":\"$RELEASE_NAME\",\"body\":\"\",\"draft\":false,\"prerelease\":false,\"generate_release_notes\":false,\"make_latest\":\"$LATEST\"}"
        RES=$(curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d $QUERY 2>/dev/null)
        RELEASE_NAME=$(echo "$RES" | jq '.name')
        ASSETS_URL=$(echo "$RES" | jq '.assets_url')
        UPLOAD_URL=$(echo "$RES" | jq '.upload_url')
        RELEASE_ID=$(echo "$RES" | jq '.id')
        ASSET_IDS=$(echo "$RES" | jq -r '.assets | map( .id ) | join(",")')
        if [ -z "$RELEASE_ID" ]; then
          echo "cannot create release $RELEASE_NAME" >> $GITHUB_STEP_SUMMARY
          echo "::error title=create release $RELEASE_NAME has failed, $RES"
          exit 1
        fi
        if [ "$RELEASE_ID" -eq "$RELEASE_ID" ] 2>/dev/null; then
          echo "release_name=$RELEASE_NAME" >> $GITHUB_ENV
          echo "release_id=$RELEASE_ID" >> $GITHUB_ENV
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_ENV
          echo "assets_url=$ASSETS_URL" >> $GITHUB_ENV
          echo "asset_ids=$ASSET_IDS" >> $GITHUB_ENV
        else
          echo "cannot create release $RELEASE_NAME" >> $GITHUB_STEP_SUMMARY
          echo "::error title=malformed output, returned release id $RELEASE_ID should be number"
          exit 1
        fi
